{"ast":null,"code":"import _toConsumableArray from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/ivoalexandroff/Desktop/ReactP1/country-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import'./style.css';import Selection from'./components/Selection';import areaIcon from'./icons/area.png';import capitalIcon from'./icons/capital.png';import currenciesIcon from'./icons/currencies.png';import languagesIcon from'./icons/languages.png';import locationIcon from'./icons/location.png';import populationIcon from'./icons/population.png';import logo from'./icons/glober-logo.png';// SUCCESS! 1) populate dwopdown list of names with ALL country names from API\n// N/A 1.5) alternatively, have a searchbox that will send search request to API and return country\n// SUCCESS! 2) match selected/searched country\n// 3) return the needed country properties from API\n// 4) display these properties in UI\nvar App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={countryList:['Select a country...'],//countrySelection: 'Russia',\nselectedCountry:'',countryData:'',countryLanguage:[],countryCurrency:[]//testCountries: ['Russia', 'New Zealand', 'Hungary']\n};_this.componentDidMount=function(){// populate 'countries' array with ALL available country names from API\nfetch('https://restcountries.eu/rest/v2/all').then(function(data){return data.json();}).then(function(result){var _loop=function _loop(i){_this.setState(function(prevState){return prevState.countryList.push(String(result[i].name));});//list.push(String(result[i].name)) - IT DID NOT LIKE USING 'list' variable, instead the fix was to update STATE using prevState and put data STRAIGHT into STATE using FOR EACH loop! :D\n};for(var i=0;i<result.length;i++){_loop(i);}});//console.log(list)\n//this.setState({countryList: list})\n};_this.testing=function(){//console.log(this.state.countryList)\nconsole.log(_this.state.countryLanguage);console.log(_this.state.countryCurrency);//console.log(this.state.countryData)\n//this.state.countryList.map((el) => console.log(el))\n};_this.handleChange=function(event){_this.setState({selectedCountry:event.target.value});_this.setState({countryLanguage:[]});_this.setState({countryCurrency:[]});//console.log(event.target.value)\nfetch(\"https://restcountries.eu/rest/v2/name/\".concat(event.target.value,\"?fullText=true\")).then(function(data){return data.json();}).then(function(result){_this.setState(function(prevState){return prevState.countryData=result[0];});var _loop2=function _loop2(i){//console.log(result[0].languages.length)\n//console.log(result[0].languages[i].name)\n_this.setState(function(prevState){return prevState.countryLanguage[i]=result[0].languages[i].name;});};for(var i=0;i<result[0].languages.length;i++){_loop2(i);}var _loop3=function _loop3(_i){//console.log(result[0].currencies.length)\n//console.log(result[0].currencies[i].name)\n_this.setState(function(prevState){return prevState.countryCurrency[_i]=result[0].currencies[_i].name;});};for(var _i=0;_i<result[0].currencies.length;_i++){_loop3(_i);}});};return _this;}_createClass(App,[{key:\"render\",//console.log(this.state.countryData)\n//{ let { name, currencies, languages, capital, subregion, population, area } = result})\n//this.setState({ countryData: [name, currencies, languages, capital, subregion, population, area] })\n//console.log(this.state.countryData)\nvalue:function render(){return React.createElement(\"div\",null,React.createElement(\"div\",null,React.createElement(\"img\",{src:logo,alt:\"logo\",className:\"logo\"})),React.createElement(\"div\",{className:\"topContainer\"},React.createElement(\"br\",null),React.createElement(Selection,{country:this.state.countryList,class:\"dropdown\",handleChange:this.handleChange,value:this.state.selectedCountry}),React.createElement(\"br\",null),React.createElement(\"h1\",{className:\"countryName\"},this.state.selectedCountry),React.createElement(\"img\",{src:this.state.countryData.flag,alt:this.state.selectedCountry,className:\"countryFlag\"})),React.createElement(\"div\",{className:\"bottomContainer\"},React.createElement(\"img\",{src:locationIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Location: \",this.state.countryData.subregion),React.createElement(\"img\",{src:areaIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Area: \",this.state.countryData.area,\" km\\xB2\"),React.createElement(\"img\",{src:populationIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Population: \",this.state.countryData.population),React.createElement(\"img\",{src:capitalIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Capital: \",this.state.countryData.capital),React.createElement(\"img\",{src:languagesIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Languages: \",_toConsumableArray(this.state.countryLanguage).join(', ')),React.createElement(\"img\",{src:currenciesIcon,alt:\"\",className:\"smallIcon\"}),React.createElement(\"h3\",{className:\"subtitle\"},\"Currencies: \",_toConsumableArray(this.state.countryCurrency).join(', '))));}}]);return App;}(React.Component);export default App;//<button onClick={this.testing}>TEST LOG</button><br/>\n/* <select className='dropdown' onChange={this.handleChange}>\n            <option>Choose a country</option>\n            <option>Russia</option>\n            <option>New Zealand</option>\n            <option>Hungary</option>\n          </select> */","map":{"version":3,"sources":["/Users/ivoalexandroff/Desktop/ReactP1/country-app/src/App.js"],"names":["React","Selection","areaIcon","capitalIcon","currenciesIcon","languagesIcon","locationIcon","populationIcon","logo","App","state","countryList","selectedCountry","countryData","countryLanguage","countryCurrency","componentDidMount","fetch","then","data","json","result","i","setState","prevState","push","String","name","length","testing","console","log","handleChange","event","target","value","languages","currencies","flag","subregion","area","population","capital","join","Component"],"mappings":"8yBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,kBAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,qBAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,aAAP,KAA0B,uBAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,sBAAzB,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,yBAAjB,CAEA;AACA;AACA;AAEA;AACA;GAEMC,CAAAA,G,+XAEJC,K,CAAQ,CACNC,WAAW,CAAE,CAAC,qBAAD,CADP,CAEN;AACAC,eAAe,CAAE,EAHX,CAINC,WAAW,CAAE,EAJP,CAKNC,eAAe,CAAE,EALX,CAMNC,eAAe,CAAE,EACjB;AAPM,C,OAURC,iB,CAAoB,UAAM,CACxB;AACAC,KAAK,CAAC,sCAAD,CAAL,CACCC,IADD,CACM,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EADV,EAECF,IAFD,CAEM,SAAAG,MAAM,CAAI,0BACNC,CADM,EAEZ,MAAKC,QAAL,CAAc,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACb,WAAV,CAAsBc,IAAtB,CAA2BC,MAAM,CAACL,MAAM,CAACC,CAAD,CAAN,CAAUK,IAAX,CAAjC,CAAJ,EAAvB,EACA;AAHY,EACd,IAAI,GAAIL,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGD,MAAM,CAACO,MAA1B,CAAkCN,CAAC,EAAnC,CAAuC,OAA/BA,CAA+B,EAGxC,CACF,CAPC,EAQA;AACA;AACH,C,OAECO,O,CAAU,UAAM,CACd;AACAC,OAAO,CAACC,GAAR,CAAY,MAAKrB,KAAL,CAAWI,eAAvB,EACAgB,OAAO,CAACC,GAAR,CAAY,MAAKrB,KAAL,CAAWK,eAAvB,EACA;AACA;AACC,C,OAEHiB,Y,CAAe,SAACC,KAAD,CAAW,CACxB,MAAKV,QAAL,CAAc,CAACX,eAAe,CAAEqB,KAAK,CAACC,MAAN,CAAaC,KAA/B,CAAd,EACA,MAAKZ,QAAL,CAAc,CAACT,eAAe,CAAE,EAAlB,CAAd,EACA,MAAKS,QAAL,CAAc,CAACR,eAAe,CAAE,EAAlB,CAAd,EACA;AAEAE,KAAK,iDAA0CgB,KAAK,CAACC,MAAN,CAAaC,KAAvD,mBAAL,CACCjB,IADD,CACM,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EADV,EAECF,IAFD,CAEM,SAAAG,MAAM,CAAI,CAEd,MAAKE,QAAL,CAAc,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACX,WAAV,CAAwBQ,MAAM,CAAC,CAAD,CAAlC,EAAvB,EAFc,2BAILC,CAJK,EAKZ;AACA;AACA,MAAKC,QAAL,CAAc,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACV,eAAV,CAA0BQ,CAA1B,EAA+BD,MAAM,CAAC,CAAD,CAAN,CAAUe,SAAV,CAAoBd,CAApB,EAAuBK,IAA1D,EAAvB,EAPY,EAId,IAAK,GAAIL,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,MAAM,CAAC,CAAD,CAAN,CAAUe,SAAV,CAAoBR,MAAxC,CAAgDN,CAAC,EAAjD,CAAqD,QAA5CA,CAA4C,EAIpD,CARa,2BASLA,EATK,EAUZ;AACA;AACA,MAAKC,QAAL,CAAc,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACT,eAAV,CAA0BO,EAA1B,EAA+BD,MAAM,CAAC,CAAD,CAAN,CAAUgB,UAAV,CAAqBf,EAArB,EAAwBK,IAA3D,EAAvB,EAZY,EASd,IAAK,GAAIL,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGD,MAAM,CAAC,CAAD,CAAN,CAAUgB,UAAV,CAAqBT,MAAzC,CAAiDN,EAAC,EAAlD,CAAsD,QAA7CA,EAA6C,EAIrD,CACF,CAhBD,EAiBD,C,+CAIC;AACA;AACA;AACA;uBAGO,CACP,MACE,gCACE,+BACE,2BAAK,GAAG,CAAEd,IAAV,CAAgB,GAAG,CAAC,MAApB,CAA2B,SAAS,CAAC,MAArC,EADF,CADF,CAIE,2BAAK,SAAS,CAAC,cAAf,EACE,8BADF,CAEE,oBAAC,SAAD,EAAW,OAAO,CAAE,KAAKE,KAAL,CAAWC,WAA/B,CAA4C,KAAK,CAAC,UAAlD,CAA6D,YAAY,CAAE,KAAKqB,YAAhF,CAA8F,KAAK,CAAE,KAAKtB,KAAL,CAAWE,eAAhH,EAFF,CAGE,8BAHF,CAIE,0BAAI,SAAS,CAAC,aAAd,EAA6B,KAAKF,KAAL,CAAWE,eAAxC,CAJF,CAKE,2BAAK,GAAG,CAAE,KAAKF,KAAL,CAAWG,WAAX,CAAuByB,IAAjC,CAAuC,GAAG,CAAE,KAAK5B,KAAL,CAAWE,eAAvD,CAAwE,SAAS,CAAC,aAAlF,EALF,CAJF,CAWE,2BAAK,SAAS,CAAC,iBAAf,EACE,2BAAK,GAAG,CAAEN,YAAV,CAAwB,GAAG,CAAC,EAA5B,CAA+B,SAAS,CAAC,WAAzC,EADF,CAEE,0BAAI,SAAS,CAAC,UAAd,eAAoC,KAAKI,KAAL,CAAWG,WAAX,CAAuB0B,SAA3D,CAFF,CAGE,2BAAK,GAAG,CAAErC,QAAV,CAAoB,GAAG,CAAC,EAAxB,CAA2B,SAAS,CAAC,WAArC,EAHF,CAIE,0BAAI,SAAS,CAAC,UAAd,WAAgC,KAAKQ,KAAL,CAAWG,WAAX,CAAuB2B,IAAvD,WAJF,CAKE,2BAAK,GAAG,CAAEjC,cAAV,CAA0B,GAAG,CAAC,EAA9B,CAAiC,SAAS,CAAC,WAA3C,EALF,CAME,0BAAI,SAAS,CAAC,UAAd,iBAAsC,KAAKG,KAAL,CAAWG,WAAX,CAAuB4B,UAA7D,CANF,CAOE,2BAAK,GAAG,CAAEtC,WAAV,CAAuB,GAAG,CAAC,EAA3B,CAA8B,SAAS,CAAC,WAAxC,EAPF,CAQE,0BAAI,SAAS,CAAC,UAAd,cAAmC,KAAKO,KAAL,CAAWG,WAAX,CAAuB6B,OAA1D,CARF,CASE,2BAAK,GAAG,CAAErC,aAAV,CAAyB,GAAG,CAAC,EAA7B,CAAgC,SAAS,CAAC,WAA1C,EATF,CAUE,0BAAI,SAAS,CAAC,UAAd,gBAAqC,mBAAI,KAAKK,KAAL,CAAWI,eAAf,EAAgC6B,IAAhC,CAAqC,IAArC,CAArC,CAVF,CAWE,2BAAK,GAAG,CAAEvC,cAAV,CAA0B,GAAG,CAAC,EAA9B,CAAiC,SAAS,CAAC,WAA3C,EAXF,CAYE,0BAAI,SAAS,CAAC,UAAd,iBAAsC,mBAAI,KAAKM,KAAL,CAAWK,eAAf,EAAgC4B,IAAhC,CAAqC,IAArC,CAAtC,CAZF,CAXF,CADF,CA4BD,C,iBAhGe3C,KAAK,CAAC4C,S,EAoGxB,cAAenC,CAAAA,GAAf,CAEA;AAEA","sourcesContent":["import React from 'react'\nimport './style.css'\nimport Selection from './components/Selection'\nimport areaIcon from './icons/area.png'\nimport capitalIcon from './icons/capital.png'\nimport currenciesIcon from './icons/currencies.png'\nimport languagesIcon from './icons/languages.png'\nimport locationIcon from './icons/location.png'\nimport populationIcon from './icons/population.png'\nimport logo from './icons/glober-logo.png'\n\n// SUCCESS! 1) populate dwopdown list of names with ALL country names from API\n// N/A 1.5) alternatively, have a searchbox that will send search request to API and return country\n// SUCCESS! 2) match selected/searched country\n\n// 3) return the needed country properties from API\n// 4) display these properties in UI\n\nclass App extends React.Component {\n  \n  state = {\n    countryList: ['Select a country...'],\n    //countrySelection: 'Russia',\n    selectedCountry: '',\n    countryData: '',\n    countryLanguage: [],\n    countryCurrency: []\n    //testCountries: ['Russia', 'New Zealand', 'Hungary']\n    }\n\n  componentDidMount = () => {\n    // populate 'countries' array with ALL available country names from API\n    fetch('https://restcountries.eu/rest/v2/all')\n    .then(data => data.json())\n    .then(result => {\n      for(let i = 0; i < result.length; i++) {\n        this.setState(prevState => prevState.countryList.push(String(result[i].name)))\n        //list.push(String(result[i].name)) - IT DID NOT LIKE USING 'list' variable, instead the fix was to update STATE using prevState and put data STRAIGHT into STATE using FOR EACH loop! :D\n    }\n  })   \n    //console.log(list)\n    //this.setState({countryList: list})\n}\n  \n  testing = () => {\n    //console.log(this.state.countryList)\n    console.log(this.state.countryLanguage)\n    console.log(this.state.countryCurrency)\n    //console.log(this.state.countryData)\n    //this.state.countryList.map((el) => console.log(el))\n    }\n\n  handleChange = (event) => {\n    this.setState({selectedCountry: event.target.value})\n    this.setState({countryLanguage: []})\n    this.setState({countryCurrency: []})\n    //console.log(event.target.value)\n    \n    fetch(`https://restcountries.eu/rest/v2/name/${event.target.value}?fullText=true`)\n    .then(data => data.json())\n    .then(result => {\n      \n      this.setState(prevState => prevState.countryData = result[0])\n    \n      for (let i = 0; i < result[0].languages.length; i++) {\n        //console.log(result[0].languages.length)\n        //console.log(result[0].languages[i].name)\n        this.setState(prevState => prevState.countryLanguage[i] = result[0].languages[i].name)\n      }\n      for (let i = 0; i < result[0].currencies.length; i++) {\n        //console.log(result[0].currencies.length)\n        //console.log(result[0].currencies[i].name)\n        this.setState(prevState => prevState.countryCurrency[i] = result[0].currencies[i].name)\n      }\n    })\n  }\n\n\n      \n    //console.log(this.state.countryData)\n    //{ let { name, currencies, languages, capital, subregion, population, area } = result})\n    //this.setState({ countryData: [name, currencies, languages, capital, subregion, population, area] })\n    //console.log(this.state.countryData)\n    \n\n  render() {\n    return (\n      <div>\n        <div>\n          <img src={logo} alt='logo' className='logo'/>\n        </div>\n        <div className='topContainer'>\n          <br/>\n          <Selection country={this.state.countryList} class='dropdown' handleChange={this.handleChange} value={this.state.selectedCountry}/> \n          <br/>\n          <h1 className='countryName'>{this.state.selectedCountry}</h1>\n          <img src={this.state.countryData.flag} alt={this.state.selectedCountry} className='countryFlag'/>\n        </div>\n        <div className='bottomContainer'>\n          <img src={locationIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Location: {this.state.countryData.subregion}</h3>\n          <img src={areaIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Area: {this.state.countryData.area} km&sup2;</h3>\n          <img src={populationIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Population: {this.state.countryData.population}</h3>\n          <img src={capitalIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Capital: {this.state.countryData.capital}</h3>\n          <img src={languagesIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Languages: {[...this.state.countryLanguage].join(', ')}</h3>\n          <img src={currenciesIcon} alt='' className='smallIcon'/>\n          <h3 className='subtitle'>Currencies: {[...this.state.countryCurrency].join(', ')}</h3>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n//<button onClick={this.testing}>TEST LOG</button><br/>\n\n/* <select className='dropdown' onChange={this.handleChange}>\n            <option>Choose a country</option>\n            <option>Russia</option>\n            <option>New Zealand</option>\n            <option>Hungary</option>\n          </select> */"]},"metadata":{},"sourceType":"module"}